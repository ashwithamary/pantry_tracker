/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/zPIsR3nfbjp
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState, useMemo, useEffect } from "react"
import { DropdownMenu, DropdownMenuTrigger, DropdownMenuContent, DropdownMenuLabel, DropdownMenuSeparator, DropdownMenuCheckboxItem } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent } from "@/components/ui/card"
import { firestore } from "@/firebase"
import { collection, onSnapshot, doc, updateDoc, deleteDoc, addDoc } from "firebase/firestore"

export function Pantry() {
  const [searchTerm, setSearchTerm] = useState("")
  const [filterOptions, setFilterOptions] = useState({
    category: "all",
  })
  const [pantryItems, setPantryItems] = useState([])
  const [isLoading, setIsLoading] = useState(true)
  const [isAddModalOpen, setIsAddModalOpen] = useState(false);
  const [newItem, setNewItem] = useState({ name: '', quantity: 0, category: '' });

  useEffect(() => {
    if (typeof window !== "undefined" && firestore) {
      setIsLoading(true);
      console.log("Attempting to connect to Firebase");
      const pantryCollection = collection(firestore, "pantry items");
      const unsubscribe = onSnapshot(pantryCollection, (snapshot) => {
        console.log("Received snapshot from Firebase");
        const items = snapshot.docs.map(doc => {
          const data = doc.data();
          return {
            id: doc.id,
            ...data,
            name: data.name || doc.id,
            category: data["category "] || data.category || 'Uncategorized',
            quantity: parseInt(data.quantity) || 0
          };
        });
        console.log("Parsed items:", items);
        setPantryItems(items);
        setIsLoading(false);
      }, (error) => {
        console.error("Error fetching pantry items:", error);
        setIsLoading(false);
      });

      return () => unsubscribe();
    }
  }, []);

  const filteredPantryItems = useMemo(() => {
    return pantryItems.filter((item) => {
      // Check if item and item.name exist before calling toLowerCase
      const itemName = item?.name?.toLowerCase() || '';
      const searchMatch = itemName.includes(searchTerm.toLowerCase());
      const categoryMatch = filterOptions.category === "all" || item?.category === filterOptions.category;
      return searchMatch && categoryMatch;
    });
  }, [searchTerm, filterOptions, pantryItems])

  const totalItems = useMemo(() => {
    return filteredPantryItems.reduce((total, item) => total + item.quantity, 0)
  }, [filteredPantryItems])

  const handleIncrement = async (id) => {
    if (firestore) {
      const itemRef = doc(firestore, "pantry items", id);
      const item = pantryItems.find(item => item.id === id);
      const newQuantity = (parseInt(item.quantity) || 0) + 1;
      await updateDoc(itemRef, { quantity: newQuantity });
    }
  }

  const handleDecrement = async (id) => {
    if (firestore) {
      const itemRef = doc(firestore, "pantry items", id);
      const item = pantryItems.find(item => item.id === id);
      const newQuantity = Math.max((parseInt(item.quantity) || 0) - 1, 0);
      await updateDoc(itemRef, { quantity: newQuantity });
    }
  }

  const handleDelete = async (id) => {
    if (firestore) {
      const itemRef = doc(firestore, "pantry items", id);
      await deleteDoc(itemRef);
    }
  }

  const handleOpenAddModal = () => setIsAddModalOpen(true);
  const handleCloseAddModal = () => {
    setIsAddModalOpen(false);
    setNewItem({ name: '', quantity: 0, category: '' });
  };

  const handleAddItem = async () => {
    if (firestore && newItem.name && newItem.quantity > 0 && newItem.category) {
      const pantryCollection = collection(firestore, "pantry items");
      await addDoc(pantryCollection, newItem);
      handleCloseAddModal();
    }
  };

  if (isLoading) {
    return <div>Loading pantry items...</div>;
  }


  return (
    (<div className="container mx-auto px-4 py-8">
      <header className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Pantry Tracker</h1>
        <p className="text-muted-foreground">Manage your households food inventory.</p>
      </header>
      <div className="mb-8 flex items-center justify-between">
        <div className="flex items-center gap-4">
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="flex items-center gap-2">
                <FilterIcon className="h-4 w-4" />
                <span>Filter</span>
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start" className="w-48">
              <DropdownMenuLabel>Filter by</DropdownMenuLabel>
              <DropdownMenuSeparator />
              <DropdownMenuCheckboxItem
                checked={filterOptions.category === "all"}
                onCheckedChange={() => setFilterOptions({ ...filterOptions, category: "all" })}>
                All Categories
              </DropdownMenuCheckboxItem>
              <DropdownMenuSeparator />
              <DropdownMenuCheckboxItem
                checked={filterOptions.category === "Bread"}
                onCheckedChange={() => setFilterOptions({ ...filterOptions, category: "Bread" })}>
                Bread
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filterOptions.category === "Produce"}
                onCheckedChange={() => setFilterOptions({ ...filterOptions, category: "Produce" })}>
                Produce
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filterOptions.category === "Canned Goods"}
                onCheckedChange={() => setFilterOptions({ ...filterOptions, category: "Canned Goods" })}>
                Canned Goods
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filterOptions.category === "Dairy"}
                onCheckedChange={() => setFilterOptions({ ...filterOptions, category: "Dairy" })}>
                Dairy
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filterOptions.category === "Grains"}
                onCheckedChange={() => setFilterOptions({ ...filterOptions, category: "Grains" })}>
                Grains
              </DropdownMenuCheckboxItem>
              <DropdownMenuCheckboxItem
                checked={filterOptions.category === "Meat"}
                onCheckedChange={() => setFilterOptions({ ...filterOptions, category: "Meat" })}>
                Meat
              </DropdownMenuCheckboxItem>
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <div className="relative">
          <div className="absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground" />
          <Input
            type="search"
            placeholder="Search items..."
            className="pl-8 pr-4 py-2 rounded-md bg-background border border-input focus:border-primary focus:ring-primary"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)} />
        </div>
      </div>
      <div
        className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
        {filteredPantryItems.map((item) => (
          <Card key={item.id}>
            <CardContent className="p-4">
              <h3 className="text-lg font-medium mb-2">{item.name}</h3>
              <div className="flex items-center justify-between mb-2">
                <span className="text-muted-foreground">Quantity: {item.quantity}</span>
                <div className="flex items-center gap-2">
                  <Button variant="ghost" size="icon" onClick={() => handleDecrement(item.id)}>
                    <MinusIcon className="h-4 w-4" />
                  </Button>
                  <Button variant="ghost" size="icon" onClick={() => handleIncrement(item.id)}>
                    <PlusIcon className="h-4 w-4" />
                  </Button>
                  <Button variant="ghost" size="icon" onClick={() => handleDelete(item.id)}>
                    <TrashIcon className="h-4 w-4" />
                  </Button>
                </div>
              </div>
              <div className="text-muted-foreground">Category: {item.category}</div>
            </CardContent>
          </Card>
        ))}
      </div>
      <div className="mt-8 flex items-center justify-between">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <PackageIcon className="h-5 w-5 text-muted-foreground" />
            <span className="text-muted-foreground">Total Items: {totalItems}</span>
          </div>
        </div>
        <Button variant="outline" onClick={handleOpenAddModal}>
          <PlusIcon className="h-4 w-4 mr-2" />
          Add New Item
        </Button>
      </div>
      {isAddModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-[#f5f1e8] p-8 rounded-lg shadow-lg max-w-md w-full">
            <h2 className="text-2xl font-bold mb-6 text-center text-[#3c3c3c]">Add New Item</h2>
            <div className="space-y-4">
              <input
                type="text"
                placeholder="Item Name"
                className="w-full p-3 border border-[#d3cec4] rounded-md focus:outline-none focus:ring-2 focus:ring-[#a39e93] bg-white"
                value={newItem.name}
                onChange={(e) => setNewItem({...newItem, name: e.target.value})}
              />
              <input
                type="number"
                placeholder="Quantity"
                className="w-full p-3 border border-[#d3cec4] rounded-md focus:outline-none focus:ring-2 focus:ring-[#a39e93] bg-white"
                value={newItem.quantity}
                onChange={(e) => setNewItem({...newItem, quantity: parseInt(e.target.value)})}
              />
              <select
                className="w-full p-3 border border-[#d3cec4] rounded-md focus:outline-none focus:ring-2 focus:ring-[#a39e93] bg-white"
                value={newItem.category}
                onChange={(e) => setNewItem({...newItem, category: e.target.value})}
              >
                <option value="">Select Category</option>
                <option value="Bread">Bread</option>
                <option value="Produce">Produce</option>
                <option value="Canned Goods">Canned Goods</option>
                <option value="Dairy">Dairy</option>
                <option value="Grains">Grains</option>
                <option value="Meat">Meat</option>
              </select>
            </div>
            <div className="flex justify-end mt-6 space-x-4">
              <Button variant="outline" onClick={handleCloseAddModal} className="bg-white hover:bg-[#e8e4db]">Cancel</Button>
              <Button onClick={handleAddItem} className="bg-[#a39e93] hover:bg-[#8c8679] text-white">Add Item</Button>
            </div>
          </div>
        </div>
      )}
    </div>)
  );
}

function FilterIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <polygon points="22 3 2 3 10 12.46 10 19 14 21 14 12.46 22 3" />
    </svg>)
  );
}


function MinusIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M5 12h14" />
    </svg>)
  );
}


function PackageIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="m7.5 4.27 9 5.15" />
      <path
        d="M21 8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16Z" />
      <path d="m3.3 7 8.7 5 8.7-5" />
      <path d="M12 22V12" />
    </svg>)
  );
}


function PlusIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M5 12h14" />
      <path d="M12 5v14" />
    </svg>)
  );
}


function TrashIcon(props) {
  return (
    (<svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round">
      <path d="M3 6h18" />
      <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6" />
      <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2" />
    </svg>)
  );
}